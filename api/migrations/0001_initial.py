# Generated by Django 4.1.6 on 2023-02-16 17:12

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(default='', max_length=100)),
                ('roll_num', models.CharField(default='', max_length=100)),
                ('is_sac', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('phn_num', models.CharField(default='+91 0000 000 000', max_length=100)),
                ('profile_pic', models.ImageField(default='static/img.png', upload_to='pics')),
                ('bio', models.CharField(default='', max_length=100)),
                ('sac_role', models.CharField(default='', max_length=100)),
                ('admin_role', models.CharField(default='', max_length=100)),
                ('date_of_birth', models.DateTimeField(default=django.utils.timezone.now)),
                ('high_post_count', models.IntegerField(default=0)),
                ('high_lst_count', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Academic_table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('academic_name', models.CharField(default='', max_length=50)),
                ('sun', models.TextField(default='')),
                ('mon', models.TextField(default='')),
                ('tue', models.TextField(default='')),
                ('wed', models.TextField(default='')),
                ('thu', models.TextField(default='')),
                ('fri', models.TextField(default='')),
                ('sat', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='Lost_Found',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lst_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(default='', max_length=50)),
                ('description', models.TextField(default='')),
                ('img', models.ImageField(default='static/img.png', upload_to='pics')),
                ('comment_count', models.IntegerField(default=0)),
                ('posted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lst_found_username', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='Mess_table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostel', models.CharField(default='', max_length=50)),
                ('sun', models.TextField(default='')),
                ('mon', models.TextField(default='')),
                ('tue', models.TextField(default='')),
                ('wed', models.TextField(default='')),
                ('thu', models.TextField(default='')),
                ('fri', models.TextField(default='')),
                ('sat', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='PostTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(default='', max_length=100)),
                ('description', models.TextField(default='')),
                ('img', models.FileField(default='static/img.png', upload_to='pics')),
                ('profile_pic', models.ImageField(default='static/img.png', upload_to='pics')),
                ('post_file', models.IntegerField(default=0)),
                ('tag', models.CharField(default='post', max_length=20)),
                ('is_like', models.BooleanField(default=False)),
                ('like_count', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('posted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('event_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('Admin', models.BooleanField(default=False)),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_table_username', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='post_Likes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_like_id', to='api.posttable')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_like_username', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='post_Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Comment', models.TextField(default='')),
                ('posted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('post_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_comment', to='api.posttable')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_comment_username', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LST_Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lst_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('e_mail', models.CharField(default='', max_length=50)),
                ('Comment', models.TextField(default='')),
                ('posted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('lst_cmnt_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lst_found_comment', to='api.lost_found')),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(default='', max_length=50)),
                ('description', models.TextField(default='')),
                ('event_img', models.FileField(default='static/img.png', upload_to='pics')),
                ('event_vedio', models.FileField(default='static/img.png', upload_to='pics')),
                ('is_like', models.BooleanField(default=False)),
                ('like_count', models.IntegerField(default=0)),
                ('posted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('event_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events_username', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='Event_likes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('posted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('event_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_like_id', to='api.events')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_like', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
        migrations.CreateModel(
            name='Clubs_Sports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(default='static/img.png', upload_to='pics')),
                ('title', models.CharField(default='', max_length=50)),
                ('club_r_sport', models.CharField(default='', max_length=50)),
                ('name', models.CharField(default='', max_length=50)),
                ('team_members', models.TextField(default='')),
                ('description', models.TextField(default='')),
                ('websites', models.CharField(default='', max_length=100)),
                ('head', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Club_sports_head', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Alerts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(default='', max_length=50)),
                ('description', models.TextField(default='')),
                ('img', models.FileField(default='static/img.png', upload_to='pics')),
                ('comment_count', models.IntegerField(default=0)),
                ('posted_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts_username', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-posted_date'],
            },
        ),
    ]
